/**
 * @author MintDaL
 * @warn Do not edit code or edit credits
 */

module.exports.config = {
    name: "banbaucua",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "MintDaL",
    description: "Game b·∫ßu cua nhi·ªÅu ng∆∞·ªùi ch∆°i",
    commandCategory: "game-mp",
    usages: "[create/join/leave/start]",
    cooldowns: 0
};

module.exports.handleEvent = async function ({
    api,
    event,
    Currencies
}) {
    const fs = require("fs-extra")
    const axios = require("axios")
    const {
        threadID,
        messageID,
        body,
        senderID
    } = event;
    if (!body) return;
    async function checkMoney(senderID, maxMoney) {
        var i, w;
        i = (await Currencies.getData(senderID)) || {};
        w = i.money || 0
        if (w < parseInt(maxMoney)) return false;
        else return true;
    }
    async function replace(itemOne, itemTwo, itemThree) {
        var bauuu = 'https://i.imgur.com/1MZ2RUz.png',
            cuaaa = 'https://i.imgur.com/OrzfTwg.png',
            tommm = 'https://i.imgur.com/8nTJyNK.png',
            caaa = 'https://i.imgur.com/EOH26Am.png',
            naiii = 'https://i.imgur.com/sPP6Glh.png',
            gaaa = 'https://i.imgur.com/uV4eyKs.png';
        if (itemOne == "b·∫ßu") {
            var icon_1 = "üçê",
                path_1 = "bau";
            let img_bau = (await axios.get(bauuu, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_1}.png`, Buffer.from(img_bau, "utf-8"));
        }
        if (itemOne == "cua") {
            var icon_1 = "ü¶Ä",
                path_1 = "cua";
            let img_cua = (await axios.get(cuaaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_1}.png`, Buffer.from(img_cua, "utf-8"));
        }
        if (itemOne == "t√¥m") {
            var icon_1 = "ü¶û",
                path_1 = "tom";
            let img_tom = (await axios.get(tommm, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_1}.png`, Buffer.from(img_tom, "utf-8"));
        }
        if (itemOne == "c√°") {
            var icon_1 = "üêü",
                path_1 = "ca";
            let img_ca = (await axios.get(caaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_1}.png`, Buffer.from(img_ca, "utf-8"));
        }
        if (itemOne == "nai") {
            var icon_1 = "ü¶å",
                path_1 = "nai";
            let img_nai = (await axios.get(naiii, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_1}.png`, Buffer.from(img_nai, "utf-8"));
        }
        if (itemOne == "g√†") {
            var icon_1 = "üêì",
                path_1 = "ga";
            let img_ga = (await axios.get(gaaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_1}.png`, Buffer.from(img_ga, "utf-8"));
        }
        if (itemTwo == "b·∫ßu") {
            var icon_2 = "üçê",
                path_2 = "bau"
            let img_bau = (await axios.get(bauuu, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_2}.png`, Buffer.from(img_bau, "utf-8"));
        }
        if (itemTwo == "cua") {
            var icon_2 = "ü¶Ä",
                path_2 = "cua"
            let img_cua = (await axios.get(cuaaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_2}.png`, Buffer.from(img_cua, "utf-8"));
        }
        if (itemTwo == "t√¥m") {
            var icon_2 = "ü¶û",
                path_2 = "tom"
            let img_tom = (await axios.get(tommm, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_2}.png`, Buffer.from(img_tom, "utf-8"));
        }
        if (itemTwo == "c√°") {
            var icon_2 = "üêü",
                path_2 = "ca"
            let img_ca = (await axios.get(caaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_2}.png`, Buffer.from(img_ca, "utf-8"));
        }
        if (itemTwo == "nai") {
            var icon_2 = "ü¶å",
                path_2 = "nai"
            let img_nai = (await axios.get(naiii, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_2}.png`, Buffer.from(img_nai, "utf-8"));
        }
        if (itemTwo == "g√†") {
            var icon_2 = "üêì",
                path_2 = "ga"
            let img_ga = (await axios.get(gaaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_2}.png`, Buffer.from(img_ga, "utf-8"));
        }
        if (itemThree == "b·∫ßu") {
            var icon_3 = "üçê",
                path_3 = "bau"
            let img_bau = (await axios.get(bauuu, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_3}.png`, Buffer.from(img_bau, "utf-8"));
        }
        if (itemThree == "cua") {
            var icon_3 = "ü¶Ä",
                path_3 = "cua"
            let img_cua = (await axios.get(cuaaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_3}.png`, Buffer.from(img_cua, "utf-8"));
        }
        if (itemThree == "t√¥m") {
            var icon_3 = "ü¶û",
                path_3 = "tom"
            let img_tom = (await axios.get(tommm, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_3}.png`, Buffer.from(img_tom, "utf-8"));
        }
        if (itemThree == "c√°") {
            var icon_3 = "üêü",
                path_3 = "ca"
            let img_ca = (await axios.get(caaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_3}.png`, Buffer.from(img_ca, "utf-8"));
        }
        if (itemThree == "nai") {
            var icon_3 = "ü¶å",
                path_3 = "nai"
            let img_nai = (await axios.get(naiii, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_3}.png`, Buffer.from(img_nai, "utf-8"));
        }
        if (itemThree == "g√†") {
            var icon_3 = "üêì",
                path_3 = "ga"
            let img_ga = (await axios.get(gaaa, {
                responseType: "arraybuffer"
            })).data;
            fs.writeFileSync(__dirname + `/cache/${path_3}.png`, Buffer.from(img_ga, "utf-8"));
        }
        var imgBaucua = [];
        imgBaucua.push(fs.createReadStream(__dirname + `/cache/${path_1}.png`));
        imgBaucua.push(fs.createReadStream(__dirname + `/cache/${path_2}.png`));
        imgBaucua.push(fs.createReadStream(__dirname + `/cache/${path_3}.png`));
        var msg = {
            body: `¬ª K·∫øt qu·∫£: ${icon_1} | ${icon_2} | ${icon_3}`,
            attachment: imgBaucua
        }
        api.sendMessage(msg, threadID, messageID)
    }
    const typ = ['b·∫ßu', 'cua', 't√¥m', 'c√°', 'nai', 'g√†'];

    const itemOne = typ[Math.floor(Math.random() * typ.length)];
    const itemTwo = typ[Math.floor(Math.random() * typ.length)];
    const itemThree = typ[Math.floor(Math.random() * typ.length)];

    var ketqua = [itemOne, itemTwo, itemThree]
    const choosee = body.split(" ")

    if (typ.includes(choosee[0].toLowerCase()) == true) {
        if (!global.baucua) return
        const gameThread = global.baucua.get(threadID) || {};
        if (!gameThread) return;
        if (gameThread.start != true) return;
        if (!choosee[1]) return api.sendMessage('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c!', threadID, messageID);
        if (await checkMoney(senderID, choosee[1]) == false) return api.sendMessage('B·∫°n kh√¥ng ƒë·ªß ti·ªÅn c∆∞·ª£c!', threadID, messageID)
        else {
            var playerGame = gameThread.player.length
            if (!gameThread.player.find(i => i.userID == senderID)) return;

            else {
                var s, q;
                var s = gameThread.player.findIndex(i => i.userID == senderID);
                var q = gameThread.player[s];
                if (q.choose.status == true) return api.sendMessage('B·∫°n ƒë√£ ch·ªçn r·ªìi kh√¥ng th·ªÉ ch·ªçn l·∫°i!', threadID, messageID);
                else {
                    if (typ.includes(choosee[0].toLowerCase()) == true) {
                        gameThread.player.splice(s, 1);
                        gameThread.player.push({
                            name: q.name,
                            userID: senderID,
                            choose: {
                                status: true,
                                msg: choosee[0].toLowerCase(),
                                money: parseInt(choosee[1])
                            }
                        });
                        api.sendMessage(`Ng∆∞·ªùi ch∆°i ${q.name} ƒë√£ ch·ªçn ${choosee[0].toLowerCase()} v·ªõi m·ª©c ƒë·∫∑t c∆∞·ª£c ${choosee[1]}$`, threadID, messageID);
                    }
                    var vv = 0,
                        vvv = gameThread.player.length;
                    for (var c of gameThread.player) {
                        if (c.choose.status == true) vv++;
                    }
                    if (vv == vvv) {
                        let gifBaucua = (await axios.get('https://i.imgur.com/DQ3r9Yd.gif', {
                            responseType: "arraybuffer"
                        })).data;
                        fs.writeFileSync(__dirname + `/cache/baucua.gif`, Buffer.from(gifBaucua, "utf-8"));
                        var gifBaucua_push = [];
                        gifBaucua_push.push(fs.createReadStream(__dirname + `/cache/baucua.gif`));
                        var msg1 = {
                            body: "L·∫Øc kh√¥ng x·ªãt ƒë·ªùi kh√¥ng n·ªÉ.",
                            attachment: gifBaucua_push
                        }
                        api.sendMessage(msg1, threadID, async (error, info) => {
                            await new Promise(resolve => setTimeout(resolve, 3000));
                            api.unsendMessage(info.messageID);
                        }, messageID);
                        await new Promise(resolve => setTimeout(resolve, 7000));
                        await replace(itemOne, itemTwo, itemThree)
                        await new Promise(resolve => setTimeout(resolve, 3000));
                        await checkWin(ketqua, gameThread);
                    } else return;
                }
            }
        }
    }
    async function checkWin(ketqua, gameThread) {
        var checkwin = gameThread.player.filter(i => ketqua.includes(i.choose.msg) == true)
        var checklose = gameThread.player.filter(i => ketqua.includes(i.choose.msg) == false)
        var msg;
        if (checkwin.length != 0) {
            msg = '=== [ WINNER ] ===\n'
            for (let i of checkwin) {
                var checkItem = ketqua.filter(a => a == i.choose.msg)
                await Currencies.increaseMoney(i.userID, parseInt(i.choose.money) * checkItem.length);
                msg += `¬ª ${i.name} ƒë·∫∑t ${i.choose.msg} n√™n ƒë√£ th·∫Øng ${parseInt(i.choose.money) * checkItem.length}$\n`
            }
        }
        if (checklose.length != 0) {
            msg += '\n=== [ LOSER ] ===\n'
            for (let i of checklose) {
                await Currencies.decreaseMoney(i.userID, parseInt(i.choose.money));
                msg += `¬ª ${i.name} ƒë·∫∑t ${i.choose.msg} n√™n ƒë√£ thua ${i.choose.money}$\n`
            }
        }
        global.baucua.delete(threadID);
        api.sendMessage(msg, threadID, messageID);
    }
}
module.exports.run = async function ({
    api,
    event,
    args,
    Threads,
    Users,
    Currencies,
    getText
}) {
    try {
        if (!global.baucua) global.baucua = new Map();
        const {
            threadID,
            messageID,
            senderID
        } = event;
        var gameThread = global.baucua.get(threadID);
        switch (args[0]) {
            case "create":
            case "new":
            case "-c": {
                if (await checkMoney(senderID, 50) == false) return api.sendMessage('Y√™u c·∫ßu c√≥ √≠t nh·∫•t 50$ ƒë·ªÉ tham gia!', threadID, messageID)
                if (global.baucua.has(threadID)) return api.sendMessage('ƒê√£ c√≥ b√†n b·∫ßu cua t·∫°i nh√≥m n√†y.', threadID, messageID);
                var name = await Users.getNameUser(senderID);
                global.baucua.set(threadID, {
                    box: threadID,
                    start: false,
                    author: senderID,
                    player: [{
                        name,
                        userID: senderID,
                        choose: {
                            status: false,
                            msg: null,
                            money: null
                        }
                    }]
                });
                return api.sendMessage("T·∫°o b√†n b·∫ßu cua th√†nh c√¥ng! ƒê·ªÉ tham gia b·∫°n h√£y nh·∫≠p 'baucua join'", threadID, messageID);
                break;
            }
            case "join":
            case "-j": {
                if (await checkMoney(senderID, 50) == false) return api.sendMessage('Y√™u c·∫ßu c√≥ √≠t nh·∫•t 50$ ƒë·ªÉ tham gia!', threadID, messageID)
                if (!global.baucua.has(threadID)) return api.sendMessage('Kh√¥ng c√≥ b√†n b·∫ßu cua n√†o ƒë·ªÉ tham gia!', threadID, messageID);
                if (gameThread.start == true) return api.sendMessage('B√†n ƒë√£ b·∫Øt ƒë·∫ßu.', threadID, messageID);
                if (gameThread.player.find(i => i.userID == senderID)) return api.sendMessage('B·∫°n ƒë√£ tham gia tr∆∞·ªõc ƒë√≥ r·ªìi!', threadID, messageID);
                var name = await Users.getNameUser(senderID);
                gameThread.player.push({
                    name,
                    userID: senderID,
                    choose: {
                        stats: false,
                        msg: null,
                        money: null
                    }
                });
                global.baucua.set(threadID, gameThread);
                return api.sendMessage('Tham gia th√†nh c√¥ng!', threadID, messageID);
                break;
            }
            case "leave":
            case "-l'": {
                if (!global.baucua.has(threadID)) return api.sendMessage('Kh√¥ng c√≥ b√†n b·∫ßu cua n√†o ƒë·ªÉ r·ªùi kh·ªèi!', threadID, messageID);
                if (!gameThread.player.find(i => i.userID == senderID)) return api.sendMessage('B·∫°n ch∆∞a tham gia n√™n kh√¥ng th·ªÉ r·ªùi!', threadID, messageID);
                if (gameThread.start == true) return api.sendMessage('Game ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi, h∆°i mu·ªôn nha!', threadID, messageID);
                if (gameThread.author == senderID) {
                    global.baucua.delete(threadID);
                    var name = await Users.getNameUser(senderID);
                    return api.sendMessage('Author ƒë√£ r·ªùi kh·ªèi b√†n, ƒë·ªìng nghƒ©a v·ªõi vi·ªác b√†n s·∫Ω b·ªã gi·∫£i t√°n!', threadID, messageID);
                } else {
                    gameThread.player.splice(gameThread.player.findIndex(i => i.userID == senderID), 1);
                    global.baucua.set(threadID, gameThread);
                    var name = await Users.getNameUser(senderID);
                    api.sendMessage('R·ªùi th√†nh c√¥ng!', threadID, messageID);
                    return api.sendMessage(`${name} ƒë√£ r·ªùi b√†n, c√≤n l·∫°i ${gameThread.player.length} ng∆∞·ªùi ch∆°i.`, threadID);
                }
                break;
            }
            case "start":
            case "-s": {
                if (!gameThread) return api.sendMessage('Kh√¥ng c√≥ b√†n b·∫ßu cua n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu!', threadID, messageID);
                if (gameThread.author != senderID) return api.sendMessage('Ch·ªâ c√≥ ng∆∞·ªùi t·∫°o m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu!', threadID, messageID);
                if (gameThread.player.length <= 1) return api.sendMessage('S·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i ph·∫£i t·ª´ 2 tr·ªü l√™n!', threadID, messageID);
                if (gameThread.start == true) return api.sendMessage('Game ƒë√£ b·∫Øt ƒë·∫ßu tr∆∞·ªõc ƒë√≥', threadID, messageID);
                gameThread.start = true;
                global.baucua.set(threadID, gameThread);
                return api.sendMessage(`B·∫Øt ƒë·∫ßu! Xin m·ªùi ${gameThread.player.length} ng∆∞·ªùi ch∆°i ch·ªçn linh v·∫≠t mu·ªën ch·ªçn v√† s·ªë ti·ªÅn mu·ªën c∆∞·ª£c`, threadID);
                break;
            }
            case "end":
            case "-e": {
                if (!gameThread) return api.sendMessage('Kh√¥ng c√≥ b√†n b·∫ßu cua n√†o ƒë·ªÉ k·∫øt th√∫c!', threadID, messageID);
                if (gameThread.author != senderID) return api.sendMessage('Ch·ªâ c√≥ ng∆∞·ªùi t·∫°o m·ªõi c√≥ th·ªÉ k·∫øt th√∫c!', threadID, messageID);
                global.baucua.delete(threadID);
                return api.sendMessage(`K·∫øt th√∫c th√†nh c√¥ng`, threadID, messageID);
                break;
            }
            default: {
                return api.sendMessage("=== [ BAUCUA ] ===\nNh√† c√°i s·∫Ω l·∫Øc ba x√∫c x·∫Øc v√† ng∆∞·ªùi ch∆°i s·∫Ω ch·ªçn m·ªôt trong s√°u linh v·∫≠t k√®m s·ªë ti·ªÅn mu·ªën c∆∞·ª£c. Khi khui ·∫øu trong ba vi√™n x√∫c x·∫Øc xu·∫•t hi·ªán linh v·∫≠t m√† ng∆∞·ªùi ch∆°i ƒë√£ ƒë·∫∑t c∆∞·ª£c ti·ªÅn, h·ªç s·∫Ω l·∫•y l·∫°i ti·ªÅn c∆∞·ª£c v√† nh√† c√°i ph·∫£i tr·∫£ s·ªë ti·ªÅn b·∫±ng v·ªõi s·ªë l·∫ßn linh v·∫≠t ƒë√≥ xu·∫•t hi·ªán nh√¢n v·ªõi s·ªë ti·ªÅn c∆∞·ª£c.\n\nH∆∞·ªõng d·∫´n ch∆°i b·∫ßu cua:\n¬ª create: ƒë·ªÉ t·∫°o b√†n ch∆°i\n¬ª start : ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n ƒë·∫•u\n¬ª join : ƒë·ªÉ tham gia v√°n ƒë·∫•u\n¬ª leave : ƒë·ªÉ r·ªùi kh·ªèi b√†n ch∆°i", threadID, messageID);
            }
        }
    } catch (err) {
        return api.sendMessage(getText("error", err), event.threadID, event.messageID);
    }
    async function checkMoney(senderID, maxMoney) {
        var i, w;
        i = (await Currencies.getData(senderID)) || {};
        w = i.money || 0
        if (w < parseInt(maxMoney)) return false;
        else return true;
    }
}